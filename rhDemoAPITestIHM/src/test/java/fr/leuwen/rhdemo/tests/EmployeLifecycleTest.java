package fr.leuwen.rhdemo.tests;

import fr.leuwen.rhdemo.tests.base.BaseSeleniumTest;
import fr.leuwen.rhdemo.tests.config.TestConfig;
import fr.leuwen.rhdemo.tests.pages.EmployeAddPage;
import fr.leuwen.rhdemo.tests.pages.EmployeDeletePage;
import fr.leuwen.rhdemo.tests.pages.EmployeListPage;
import org.junit.jupiter.api.*;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Test du cycle complet de gestion d'un employ√© :
 * 1. Ajout d'un employ√©
 * 2. V√©rification de sa pr√©sence dans la liste
 * 3. Suppression de l'employ√©
 */
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class EmployeLifecycleTest extends BaseSeleniumTest {
    
    private static EmployeAddPage addPage;
    private static EmployeListPage listPage;
    private static EmployeDeletePage deletePage;
    
    // Donn√©es de test
    private static final String TEST_PRENOM = "Selenium";
    private static final String TEST_NOM = "TestUser";
    private static final String TEST_EMAIL = "selenium.test@example.com";
    private static final String TEST_ADRESSE = "123 Test Street, Selenium City";
    private static String employeId; // ID de l'employ√© cr√©√© (sera r√©cup√©r√© apr√®s l'ajout)
    
    @BeforeAll
    public static void setUpTests() {
        // Initialisation des pages apr√®s le setup du driver
        addPage = new EmployeAddPage(driver);
        listPage = new EmployeListPage(driver);
        deletePage = new EmployeDeletePage(driver);
    }
    
    @Test
    @Order(1)
    @DisplayName("1. Ajout d'un nouvel employ√©")
    public void testAddEmploye() {
        System.out.println("üîµ √âTAPE 1: Ajout d'un nouvel employ√©");
        
        // Aller sur la page d'ajout
        driver.get(TestConfig.EMPLOYE_ADD_URL);
        
        // Remplir le formulaire
        addPage.fillEmployeForm(TEST_PRENOM, TEST_NOM, TEST_EMAIL, TEST_ADRESSE);
        
        // Soumettre le formulaire
        addPage.clickAddButton();
        
        // V√©rifier que le message de succ√®s s'affiche
        assertThat(addPage.isSuccessMessageDisplayed())
            .as("Le message de succ√®s devrait √™tre affich√©")
            .isTrue();
        
        String successMessage = addPage.getSuccessMessage();
        assertThat(successMessage)
            .as("Le message devrait confirmer l'ajout")
            .containsIgnoringCase("succ√®s");
        
        // Attendre la redirection vers la liste
        addPage.waitForRedirectToEmployesList();
        
        System.out.println("‚úÖ Employ√© ajout√© avec succ√®s");
    }
    
    @Test
    @Order(2)
    @DisplayName("2. V√©rification de la pr√©sence de l'employ√© dans la liste")
    public void testEmployePresentInList() {
        System.out.println("üîµ √âTAPE 2: V√©rification de la pr√©sence dans la liste");
        
        // Aller sur la page de liste
        driver.get(TestConfig.EMPLOYES_LIST_URL);
        
        // Attendre que la table soit charg√©e
        listPage.waitForTableToLoad();
        
        // V√©rifier que la page est bien charg√©e
        assertThat(listPage.isPageLoaded())
            .as("La page de liste devrait √™tre charg√©e")
            .isTrue();
        
        // V√©rifier que l'employ√© est pr√©sent par email
        assertThat(listPage.isEmployePresentByEmail(TEST_EMAIL))
            .as("L'employ√© devrait √™tre pr√©sent dans la liste (recherche par email)")
            .isTrue();
        
        // V√©rifier que l'employ√© est pr√©sent par nom
        assertThat(listPage.isEmployePresentByName(TEST_PRENOM, TEST_NOM))
            .as("L'employ√© devrait √™tre pr√©sent dans la liste (recherche par nom)")
            .isTrue();
        
        // R√©cup√©rer l'ID de l'employ√© pour la suppression
        employeId = listPage.getEmployeIdByEmail(TEST_EMAIL);
        assertThat(employeId)
            .as("L'ID de l'employ√© devrait √™tre r√©cup√©r√©")
            .isNotNull()
            .isNotEmpty();
        
        System.out.println("‚úÖ Employ√© trouv√© dans la liste avec l'ID: " + employeId);
        
        // V√©rifier que les donn√©es compl√®tes sont pr√©sentes
        String employeData = listPage.getEmployeDataByEmail(TEST_EMAIL);
        assertThat(employeData)
            .as("Les donn√©es de l'employ√© devraient contenir toutes les informations")
            .contains(TEST_PRENOM, TEST_NOM, TEST_EMAIL);
        
        System.out.println("‚úÖ Toutes les donn√©es de l'employ√© sont correctes");
    }
    
    @Test
    @Order(3)
    @DisplayName("3. Suppression de l'employ√©")
    public void testDeleteEmploye() {
        System.out.println("üîµ √âTAPE 3: Suppression de l'employ√©");
        
        // Si l'ID n'est pas d√©fini, le r√©cup√©rer
        if (employeId == null || employeId.isEmpty()) {
            driver.get(TestConfig.EMPLOYES_LIST_URL);
            listPage.waitForTableToLoad();
            employeId = listPage.getEmployeIdByEmail(TEST_EMAIL);
            assertThat(employeId)
                .as("L'ID de l'employ√© doit √™tre disponible pour la suppression")
                .isNotNull()
                .isNotEmpty();
        }
        
        System.out.println("ID de l'employ√© √† supprimer: " + employeId);
        
        // Aller sur la page de suppression
        driver.get(TestConfig.EMPLOYE_DELETE_URL);
        
        // Rechercher l'employ√© par ID
        deletePage.searchEmployeById(employeId);
        
        // V√©rifier que les d√©tails sont affich√©s
        assertThat(deletePage.areEmployeDetailsDisplayed())
            .as("Les d√©tails de l'employ√© devraient √™tre affich√©s")
            .isTrue();
        
        // V√©rifier que les d√©tails contiennent les bonnes informations
        assertThat(deletePage.detailsContain(TEST_PRENOM))
            .as("Les d√©tails devraient contenir le pr√©nom")
            .isTrue();
        assertThat(deletePage.detailsContain(TEST_NOM))
            .as("Les d√©tails devraient contenir le nom")
            .isTrue();
        assertThat(deletePage.detailsContain(TEST_EMAIL))
            .as("Les d√©tails devraient contenir l'email")
            .isTrue();
        
        System.out.println("‚úÖ Employ√© trouv√©, lancement de la suppression...");
        
        // Supprimer l'employ√©
        deletePage.clickDeleteButton();
        deletePage.confirmDeletion();
        
        // V√©rifier le message de succ√®s
        assertThat(deletePage.isSuccessMessageDisplayed())
            .as("Le message de succ√®s de suppression devrait √™tre affich√©")
            .isTrue();
        
        System.out.println("‚úÖ Employ√© supprim√© avec succ√®s");
    }
    
    @Test
    @Order(4)
    @DisplayName("4. V√©rification que l'employ√© n'est plus dans la liste")
    public void testEmployeNotInListAfterDeletion() {
        System.out.println("üîµ √âTAPE 4: V√©rification de l'absence de l'employ√© dans la liste");
        
        // Aller sur la page de liste
        driver.get(TestConfig.EMPLOYES_LIST_URL);
        
        // Attendre que la table soit charg√©e
        listPage.waitForTableToLoad();
        
        // Actualiser la liste pour s'assurer d'avoir les donn√©es √† jour
        listPage.clickRefreshButton();
        
        // V√©rifier que l'employ√© n'est plus pr√©sent
        assertThat(listPage.isEmployePresentByEmail(TEST_EMAIL))
            .as("L'employ√© ne devrait plus √™tre pr√©sent dans la liste")
            .isFalse();
        
        System.out.println("‚úÖ Employ√© bien supprim√© de la liste");
        System.out.println("üéâ Test complet du cycle de vie termin√© avec succ√®s!");
    }
}
