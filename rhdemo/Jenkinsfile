pipeline {
    agent any
    
    tools {
        jdk 'JDK21'  // Nom configuré dans Jenkins Global Tool Configuration
        maven 'Maven3' // Nom configuré dans Jenkins Global Tool Configuration
    }
    
    environment {
        // Variables d'environnement pour l'application
        RHDEMO_CLIENT_REGISTRATION_KEYCLOAK_CLIENT_SECRET = credentials('keycloak-client-secret')
        RHDEMO_DATASOURCE_PASSWORD_H2 = credentials('h2-db-password')
        RHDEMO_DATASOURCE_PASSWORD_PG = credentials('postgres-db-password')
        
        // Configuration du pipeline
        APP_NAME = 'rhdemo-api'
        APP_VERSION = '0.0.1-SNAPSHOT'
        JAR_FILE = "target/rhdemoAPI-${APP_VERSION}.jar"
        
        // Configuration des tests
        TEST_PORT = '9000'
        TEST_PROJECT_PATH = '../rhDemoAPITestIHM'
        
        // Configuration du déploiement
        STAGING_SERVER = credentials('staging-server-url')
        PROD_SERVER = credentials('prod-server-url')
    }
    
    parameters {
        choice(name: 'DEPLOY_ENV', choices: ['none', 'staging', 'production'], description: 'Environnement de déploiement')
        booleanParam(name: 'RUN_SELENIUM_TESTS', defaultValue: true, description: 'Exécuter les tests Selenium')
        booleanParam(name: 'RUN_SONAR', defaultValue: false, description: 'Exécuter l\'analyse SonarQube')
        booleanParam(name: 'SKIP_MANUAL_APPROVAL', defaultValue: false, description: 'Ignorer l\'approbation manuelle pour la production')
    }
    
    stages {
        
        // ════════════════════════════════════════════════════════════════
        // PHASE 1 : PRÉPARATION
        // ════════════════════════════════════════════════════════════════
        
        stage('🛠️ Checkout') {
            steps {
                script {
                    echo '═══════════════════════════════════════════════════════'
                    echo '  PHASE 1 : PRÉPARATION'
                    echo '═══════════════════════════════════════════════════════'
                }
                checkout scm
                sh 'git log -1 --pretty=format:"%h - %an : %s"'
            }
        }
        
        stage('🔍 Vérification Environnement') {
            steps {
                script {
                    echo '▶ Vérification de l\'environnement...'
                    sh '''
                        echo "Java version:"
                        java -version
                        echo "\nMaven version:"
                        ./mvnw -version
                        echo "\nVariables d'environnement:"
                        env | grep RHDEMO || echo "Variables RHDEMO configurées"
                    '''
                }
            }
        }
        
        // ════════════════════════════════════════════════════════════════
        // PHASE 2 : BUILD
        // ════════════════════════════════════════════════════════════════
        
        stage('📦 Compilation Backend') {
            steps {
                script {
                    echo '═══════════════════════════════════════════════════════'
                    echo '  PHASE 2 : BUILD'
                    echo '═══════════════════════════════════════════════════════'
                    echo '▶ Compilation du backend Spring Boot...'
                }
                sh './mvnw clean compile -DskipTests'
            }
        }
        
        stage('🎨 Build Frontend Vue.js') {
            steps {
                script {
                    echo '▶ Build du frontend Vue.js via Maven...'
                }
                sh '''
                    echo "Installation Node.js et build Vue.js automatique via frontend-maven-plugin"
                    cd frontend
                    ls -la node/ || echo "Node.js sera installé par Maven"
                '''
            }
        }
        
        stage('📦 Package Complet') {
            steps {
                script {
                    echo '▶ Package du JAR avec frontend intégré...'
                }
                sh './mvnw package -DskipTests'
                sh "ls -lh ${JAR_FILE}"
            }
        }
        
        // ════════════════════════════════════════════════════════════════
        // PHASE 3 : QUALITÉ DU CODE
        // ════════════════════════════════════════════════════════════════
        
        stage('🧪 Tests Unitaires') {
            steps {
                script {
                    echo '═══════════════════════════════════════════════════════'
                    echo '  PHASE 3 : QUALITÉ DU CODE'
                    echo '═══════════════════════════════════════════════════════'
                    echo '▶ Exécution des tests unitaires avec base H2...'
                }
                sh './mvnw test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                    script {
                        echo '✅ Rapports de tests JUnit générés'
                    }
                }
            }
        }
        
        stage('🔍 Analyse SonarQube') {
            when {
                expression { params.RUN_SONAR == true }
            }
            steps {
                script {
                    echo '▶ Analyse de qualité du code avec SonarQube...'
                }
                withSonarQubeEnv('SonarQube') {
                    sh '''
                        ./mvnw sonar:sonar \
                            -Dsonar.projectKey=rhdemo-api \
                            -Dsonar.projectName="RHDemo API" \
                            -Dsonar.java.binaries=target/classes
                    '''
                }
            }
        }
        
        stage('📊 Quality Gate') {
            when {
                expression { params.RUN_SONAR == true }
            }
            steps {
                script {
                    echo '▶ Attente du Quality Gate SonarQube...'
                }
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage('📈 Couverture de Code') {
            steps {
                script {
                    echo '▶ Génération du rapport de couverture JaCoCo...'
                }
                sh './mvnw jacoco:report'
                jacoco(
                    execPattern: '**/target/jacoco.exec',
                    classPattern: '**/target/classes',
                    sourcePattern: '**/src/main/java'
                )
            }
        }
        
        // ════════════════════════════════════════════════════════════════
        // PHASE 4 : TESTS FONCTIONNELS
        // ════════════════════════════════════════════════════════════════
        
        stage('🚀 Démarrage App Test') {
            when {
                expression { params.RUN_SELENIUM_TESTS == true }
            }
            steps {
                script {
                    echo '═══════════════════════════════════════════════════════'
                    echo '  PHASE 4 : TESTS FONCTIONNELS'
                    echo '═══════════════════════════════════════════════════════'
                    echo '▶ Démarrage de l\'application en mode test...'
                    
                    // Démarrage en arrière-plan
                    sh '''
                        nohup java -jar ${JAR_FILE} \
                            --spring.profiles.active=test \
                            --server.port=${TEST_PORT} \
                            > app-test.log 2>&1 &
                        echo $! > app-test.pid
                    '''
                    
                    // Attente de disponibilité
                    sh '''
                        echo "Attente du démarrage de l'application..."
                        for i in {1..60}; do
                            if curl -s http://localhost:${TEST_PORT}/actuator/health > /dev/null; then
                                echo "✅ Application démarrée avec succès!"
                                exit 0
                            fi
                            echo "Tentative $i/60..."
                            sleep 2
                        done
                        echo "❌ Échec du démarrage de l'application"
                        exit 1
                    '''
                }
            }
        }
        
        stage('🌐 Tests Selenium IHM') {
            when {
                expression { params.RUN_SELENIUM_TESTS == true }
            }
            steps {
                script {
                    echo '▶ Exécution des tests Selenium...'
                }
                dir(TEST_PROJECT_PATH) {
                    sh '''
                        # Utilisation du wrapper Maven du projet principal
                        /home/leno-vo/git/repository/rhdemo/mvnw clean test \
                            -Dtest.baseurl=http://localhost:${TEST_PORT} \
                            -Dselenium.headless=true
                    '''
                }
            }
            post {
                always {
                    script {
                        // Archivage des screenshots en cas d'échec
                        dir(TEST_PROJECT_PATH) {
                            archiveArtifacts artifacts: '**/screenshots/**/*.png', allowEmptyArchive: true
                            junit '**/target/surefire-reports/*.xml'
                        }
                    }
                }
            }
        }
        
        stage('🛑 Arrêt App Test') {
            when {
                expression { params.RUN_SELENIUM_TESTS == true }
            }
            steps {
                script {
                    echo '▶ Arrêt de l\'application test...'
                    sh '''
                        if [ -f app-test.pid ]; then
                            PID=$(cat app-test.pid)
                            kill $PID || echo "Processus déjà arrêté"
                            rm app-test.pid
                        fi
                    '''
                }
            }
        }
        
        // ════════════════════════════════════════════════════════════════
        // PHASE 5 : SÉCURITÉ
        // ════════════════════════════════════════════════════════════════
        
        stage('🔒 Scan Vulnérabilités') {
            steps {
                script {
                    echo '═══════════════════════════════════════════════════════'
                    echo '  PHASE 5 : SÉCURITÉ'
                    echo '═══════════════════════════════════════════════════════'
                    echo '▶ Analyse des vulnérabilités des dépendances...'
                }
                sh './mvnw org.owasp:dependency-check-maven:check'
            }
            post {
                always {
                    publishHTML([
                        reportDir: 'target',
                        reportFiles: 'dependency-check-report.html',
                        reportName: 'OWASP Dependency Check',
                        allowMissing: true
                    ])
                }
            }
        }
        
        // ════════════════════════════════════════════════════════════════
        // PHASE 6 : ARCHIVAGE
        // ════════════════════════════════════════════════════════════════
        
        stage('📚 Archivage Artifacts') {
            steps {
                script {
                    echo '═══════════════════════════════════════════════════════'
                    echo '  PHASE 6 : ARCHIVAGE'
                    echo '═══════════════════════════════════════════════════════'
                    echo '▶ Archivage du JAR et des rapports...'
                }
                archiveArtifacts artifacts: "${JAR_FILE}", fingerprint: true
                archiveArtifacts artifacts: '**/target/surefire-reports/**', allowEmptyArchive: true
            }
        }
        
        stage('📝 Génération Rapports') {
            steps {
                script {
                    echo '▶ Publication des rapports...'
                }
                publishHTML([
                    reportDir: 'target/site/jacoco',
                    reportFiles: 'index.html',
                    reportName: 'Code Coverage',
                    allowMissing: true
                ])
            }
        }
        
        // ════════════════════════════════════════════════════════════════
        // PHASE 7 : DÉPLOIEMENT STAGING
        // ════════════════════════════════════════════════════════════════
        
        stage('🎭 Déploiement Staging') {
            when {
                expression { params.DEPLOY_ENV == 'staging' || params.DEPLOY_ENV == 'production' }
            }
            steps {
                script {
                    echo '═══════════════════════════════════════════════════════'
                    echo '  PHASE 7 : DÉPLOIEMENT STAGING'
                    echo '═══════════════════════════════════════════════════════'
                    echo '▶ Déploiement sur l\'environnement de staging...'
                }
                sh '''
                    # Déploiement via SSH ou script de déploiement
                    echo "Copie du JAR vers le serveur de staging..."
                    # scp ${JAR_FILE} user@${STAGING_SERVER}:/opt/rhdemo/
                    
                    echo "Redémarrage de l'application sur staging..."
                    # ssh user@${STAGING_SERVER} "systemctl restart rhdemo-api"
                    
                    echo "✅ Déploiement staging simulé (décommenter les commandes SSH)"
                '''
            }
        }
        
        stage('💨 Tests de Fumée Staging') {
            when {
                expression { params.DEPLOY_ENV == 'staging' || params.DEPLOY_ENV == 'production' }
            }
            steps {
                script {
                    echo '▶ Vérification du déploiement staging...'
                }
                sh '''
                    echo "Vérification du healthcheck..."
                    # curl -f http://${STAGING_SERVER}/actuator/health || exit 1
                    
                    echo "Test de l'authentification Keycloak..."
                    # Tests de base sur les endpoints critiques
                    
                    echo "✅ Tests de fumée réussis (décommenter pour activer)"
                '''
            }
        }
        
        // ════════════════════════════════════════════════════════════════
        // PHASE 8 : PRODUCTION
        // ════════════════════════════════════════════════════════════════
        
        stage('✋ Validation Manuelle') {
            when {
                expression { 
                    params.DEPLOY_ENV == 'production' && params.SKIP_MANUAL_APPROVAL == false 
                }
            }
            steps {
                script {
                    echo '═══════════════════════════════════════════════════════'
                    echo '  PHASE 8 : PRODUCTION'
                    echo '═══════════════════════════════════════════════════════'
                    echo '▶ Approbation manuelle requise pour la production...'
                }
                timeout(time: 30, unit: 'MINUTES') {
                    input message: 'Déployer en production ?', 
                          ok: 'Déployer',
                          submitter: 'admin,deploy-team'
                }
            }
        }
        
        stage('💾 Backup Base de Données') {
            when {
                expression { params.DEPLOY_ENV == 'production' }
            }
            steps {
                script {
                    echo '▶ Sauvegarde de la base de données de production...'
                }
                sh '''
                    BACKUP_FILE="db-backup-$(date +%Y%m%d-%H%M%S).sql"
                    echo "Création du backup: ${BACKUP_FILE}"
                    # pg_dump -h ${PROD_DB_HOST} -U ${PROD_DB_USER} rhdemo > ${BACKUP_FILE}
                    echo "✅ Backup créé (décommenter pour activer)"
                '''
            }
        }
        
        stage('🌐 Déploiement Production') {
            when {
                expression { params.DEPLOY_ENV == 'production' }
            }
            steps {
                script {
                    echo '▶ Déploiement en PRODUCTION...'
                    echo '🚀 Déploiement Blue-Green...'
                }
                sh '''
                    # Stratégie Blue-Green deployment
                    echo "1. Déploiement sur le serveur Green..."
                    # scp ${JAR_FILE} user@${PROD_SERVER}-green:/opt/rhdemo/
                    
                    echo "2. Démarrage du nouveau service..."
                    # ssh user@${PROD_SERVER}-green "systemctl start rhdemo-api"
                    
                    echo "3. Vérification du healthcheck..."
                    # curl -f http://${PROD_SERVER}-green/actuator/health
                    
                    echo "4. Basculement du load balancer..."
                    # Commande pour basculer le trafic
                    
                    echo "5. Arrêt de l'ancien service (Blue)..."
                    # ssh user@${PROD_SERVER}-blue "systemctl stop rhdemo-api"
                    
                    echo "✅ Déploiement production simulé (décommenter pour activer)"
                '''
            }
        }
        
        stage('✅ Vérification Post-Déploiement') {
            when {
                expression { params.DEPLOY_ENV == 'production' }
            }
            steps {
                script {
                    echo '▶ Vérification du déploiement production...'
                }
                sh '''
                    echo "Healthcheck application..."
                    # curl -f http://${PROD_SERVER}/actuator/health
                    
                    echo "Vérification des métriques Prometheus..."
                    # curl -f http://${PROD_SERVER}/actuator/prometheus
                    
                    echo "Test des endpoints critiques..."
                    # Tests automatisés sur la production
                    
                    echo "✅ Application en production fonctionnelle"
                '''
            }
        }
    }
    
    // ════════════════════════════════════════════════════════════════
    // POST-ACTIONS
    // ════════════════════════════════════════════════════════════════
    
    post {
        always {
            script {
                echo '═══════════════════════════════════════════════════════'
                echo '  NETTOYAGE ET NOTIFICATIONS'
                echo '═══════════════════════════════════════════════════════'
            }
            // Nettoyage
            sh '''
                # Arrêt de l'application test si elle tourne encore
                if [ -f app-test.pid ]; then
                    kill $(cat app-test.pid) 2>/dev/null || true
                    rm app-test.pid
                fi
                
                # Nettoyage des logs
                rm -f app-test.log
            '''
            
            // Nettoyage du workspace (optionnel)
            cleanWs(
                deleteDirs: true,
                patterns: [
                    [pattern: 'target/**', type: 'INCLUDE'],
                    [pattern: '**/node_modules/**', type: 'INCLUDE']
                ]
            )
        }
        
        success {
            script {
                def deployInfo = params.DEPLOY_ENV != 'none' ? " et déployé en ${params.DEPLOY_ENV}" : ""
                echo "✅ Pipeline réussi${deployInfo} !"
            }
            
            // Notification Slack
            slackSend(
                color: 'good',
                message: """
                    ✅ *BUILD SUCCESS* - RHDemo API
                    Branch: ${env.BRANCH_NAME}
                    Build: ${env.BUILD_NUMBER}
                    Déploiement: ${params.DEPLOY_ENV}
                    Durée: ${currentBuild.durationString}
                    <${env.BUILD_URL}|Voir le build>
                """.stripIndent(),
                channel: '#rhdemo-ci'
            )
            
            // Email de notification
            emailext(
                subject: "✅ BUILD SUCCESS - RHDemo API #${env.BUILD_NUMBER}",
                body: """
                    Le build de RHDemo API a réussi !
                    
                    Branch: ${env.BRANCH_NAME}
                    Commit: ${env.GIT_COMMIT}
                    Déploiement: ${params.DEPLOY_ENV}
                    
                    Voir les détails: ${env.BUILD_URL}
                """,
                to: 'team@example.com'
            )
        }
        
        failure {
            script {
                echo "❌ Pipeline échoué !"
            }
            
            // Notification Slack en cas d'échec
            slackSend(
                color: 'danger',
                message: """
                    ❌ *BUILD FAILED* - RHDemo API
                    Branch: ${env.BRANCH_NAME}
                    Build: ${env.BUILD_NUMBER}
                    Stage: ${env.STAGE_NAME}
                    <${env.BUILD_URL}console|Voir les logs>
                """.stripIndent(),
                channel: '#rhdemo-ci'
            )
            
            // Email d'alerte
            emailext(
                subject: "❌ BUILD FAILED - RHDemo API #${env.BUILD_NUMBER}",
                body: """
                    ⚠️ Le build de RHDemo API a échoué !
                    
                    Branch: ${env.BRANCH_NAME}
                    Stage: ${env.STAGE_NAME}
                    
                    Voir les logs: ${env.BUILD_URL}console
                """,
                to: 'team@example.com',
                attachLog: true
            )
        }
        
        unstable {
            script {
                echo "⚠️ Pipeline instable (tests échoués mais build réussi)"
            }
            
            slackSend(
                color: 'warning',
                message: """
                    ⚠️ *BUILD UNSTABLE* - RHDemo API
                    Branch: ${env.BRANCH_NAME}
                    Build: ${env.BUILD_NUMBER}
                    Certains tests ont échoué
                    <${env.BUILD_URL}testReport|Voir les tests>
                """.stripIndent(),
                channel: '#rhdemo-ci'
            )
        }
    }
}
