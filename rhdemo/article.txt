Applications statefull/stateless et sécurité. 

Applications statefull ou stateless et impacts sur la sécurité. 


Avec la généralisation des protocoles OAuth2 et OpenIDConnect, basés sur des tokens et le déport de la couche présentation sur des applications client riche Javascript (SPA) il est possible de se passer de cookies pour l'authentification et le contrôle d'accès à des ressources REST depuis un navigateur. On parle d'applications stateless qui permettent entre autre une meilleure scalabilité. Cependant quelles sont les conséquences pour la sécurité ?

- Si les faiblesses de l'utilisation des cookies sont connues de longue date (vol par attaques CSRF notamment) elles ont tout de même trouvé au fil du temps des défenses intégrées coté serveur avec des mécanismes anti-CSRF natifs aux principaux frameworks et dans le navigateur, notamment la prise en charge de l'instruction HttpOnly qui empêche l'accès aux cookies par du code Javascript coté client. 

- Les tokens eux ne sont pas spécifiquement  pris en charge par les navigateurs, ils doivent être stockés sur le client soit dans le sessionStorage soit dans le localStorage ce qui rend leur vol possible par des attaques notamment XSS. 


C'est pourquoi sur les applications ayant de forts enjeux de sécurisation, les architectes choisissent parfois d'utiliser le pattern Backend For Frontend (ou BFF). Il consiste à remonter le dialogue d'obtention du token et son stockage au niveau d'un serveur applicatif. le client SPA n'a alors plus visibilité du token, il est lié au serveur applicatif par un traditionnel cookie de session.


Ceci permet également de réduire fortement l'exposition du serveur fournisseur identité qui délivre les tokens (secret coté serveur applicatif et filtrage par firewall) mais aussi l'exposition des serveurs fournisseurs de service REST qui seront également uniquement appelés par le serveur applicatif.


En retour il faut renoncer à certaines facilités amenées par le stateless et accepter une latence supplémentaire liée au transit des requêtes par le serveur applicatif qui détient le token.


La bonne architecture applicative n'existe pas dans l'absolu, elle doit répondre à des exigences parfois contradictoires et s'adapter aux règles du SI ainsi qu'aux moyens et compétences disponibles sur un projet.
